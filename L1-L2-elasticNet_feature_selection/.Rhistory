}
matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])), nrow = 2)* t(mu_b)
mu_b = matrix(c(1, 1), nrow = 1)
mu_b
t(mu_b)
matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])), nrow = 2)
matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])), nrow = 2)* t(mu_b)
compute_bckwd_message = function(potentials, idx_xn) {
# initialize mu_b_x5 vector values for X1=0 and X1=1
mu_b = matrix(c(1, 1), nrow = 1)
#idx_xn = 4
if (idx_xn < 5) {
for (i in idx_xn:1) {
# collect the matrix
print(i)
psi_n_1.n = potentials[, , i] # psi_x1,x2
# most elegant way 2x2 * 2x1 = 2x1
#mu_b = t(psi_n_1.n) %*% t(mu_b)
mu_b = t(matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])), nrow = 2) * t(mu_b))
}
} else {    # we're on node 5, return initial msg values
return(mu_b)
}
return(mu_b)
}
compute_bckwd_message(potentials, 4)
compute_bckwd_message = function(potentials, idx_xn) {
# initialize mu_b_x5 vector values for X1=0 and X1=1
mu_b = matrix(c(1, 1), nrow = 1)
#idx_xn = 4
if (idx_xn < 5) {
for (i in idx_xn:1) {
# collect the matrix
print(i)
psi_n_1.n = potentials[, , i] # psi_x1,x2
# most elegant way 2x2 * 2x1 = 2x1
#mu_b = t(psi_n_1.n) %*% t(mu_b)
mu_b = t(matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])), nrow = 2) * t(mu_b))
}
} else {    # we're on node 5, return initial msg values
return(mu_b)
}
return(mu_b)
}
# Compute all FWD messages, and store them in a 2 x 5 matrix,
# K x n, where K are X values {0, 1}, n is #nodes
messages_F = matrix(0, nrow = 2, ncol = 5)
for (i in 1:ncol(messages)) {
messages_F[, i] = t(compute_fwd_message(potentials, idx_xn=i))
}
# Compute all BCKWD messages, and store them in a 2 x 5 matrix,
# K x n, where K are X values {0, 1}, n is #nodes
messages_B = matrix(0, nrow = 2, ncol = 5)
for (i in 1:ncol(messages)) {
messages_B[, i] = compute_bckwd_message(potentials, idx_xn=i)
}
compute_bckwd_message = function(potentials, idx_xn) {
# initialize mu_b_x5 vector values for X1=0 and X1=1
mu_b = matrix(c(1, 1), nrow = 1)
#idx_xn = 4
if (idx_xn < 5) {
for (i in idx_xn:1) {
# collect the matrix
psi_n_1.n = potentials[, , i] # psi_x1,x2
# most elegant way 2x2 * 2x1 = 2x1
#mu_b = t(psi_n_1.n) %*% t(mu_b)
mu_b = t(matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])), nrow = 2) * t(mu_b))
}
} else {    # we're on node 5, return initial msg values
return(mu_b)
}
return(mu_b)
}
compute_fwd_message = function(potentials, idx_xn) {
# initialize mu_x2 vector values for X1=0 and X1=1
# it will take value of mu_a_x2
mu_a = matrix(c(1, 1), nrow = 1)
if (idx_xn > 1) {   # get messages from nodes x1 through xn
for (i in 1:(idx_xn-1)) {
# collect the matrix
psi_n_1.n = potentials[, , i] # psi_x1,x2
# 1st Psi matrix row corresponds to conditioning when xn=1, second when xn=0,
# but we want the other way round
#mu_a = mu_a %*% psi_n_1.n
# 1st Psi matrix column corresponds to conditioning when xn=1,
# second when xn=0. This gives us a 1x1 * 2x2 = 1x2 matrix
#mu_a = mu_a %*% t(psi_n_1.n)
# 3rd alternative that makes most sense
mu_a = t( t(mu_a) * matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])), nrow = 2) )
}
} else {    # return initial msg value for node 1
return(mu_a)
}
return(mu_a)
}
compute_bckwd_message = function(potentials, idx_xn) {
# initialize mu_b_x5 vector values for X1=0 and X1=1
mu_b = matrix(c(1, 1), nrow = 1)
#idx_xn = 4
if (idx_xn < 5) {
for (i in idx_xn:1) {
# collect the matrix
psi_n_1.n = potentials[, , i] # psi_x1,x2
# most elegant way 2x2 * 2x1 = 2x1
#mu_b = t(psi_n_1.n) %*% t(mu_b)
mu_b = t(matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])), nrow = 2) * t(mu_b))
}
} else {    # we're on node 5, return initial msg values
return(mu_b)
}
return(mu_b)
}
messages_F = matrix(0, nrow = 2, ncol = 5)
for (i in 1:ncol(messages)) {
messages_F[, i] = t(compute_fwd_message(potentials, idx_xn=i))
}
messages_B = matrix(0, nrow = 2, ncol = 5)
for (i in 1:ncol(messages)) {
messages_B[, i] = compute_bckwd_message(potentials, idx_xn=i)
}
messages_F
messages_B
marginals0 = messages_F[1, ] * messages_B[1, ]
marginals1 = messages_F[2, ] * messages_B[2, ]
marginals0
marginals1
marginals01 = marginals0 + marginals1
marginals01
Zs = 1/ marginals
Zs
Zs = 1/ marginals01
Zs
sum(marginals0)
sum(marginals1)
Z = sum(marginals0)
marginals0/Z
sum(marginals0/Z)
messages_F
messages_B
messages_B
compute_bckwd_message(potentials, 5)
marginals0
marginals01 = marginals0 + marginals1
marginals01
marginals01 = marginals0 + marginals1
marginals01
compute_bckwd_message = function(potentials, idx_xn) {
# initialize mu_b_x5 vector values for X1=0 and X1=1
mu_b = matrix(c(1, 1), nrow = 1)
#idx_xn = 4
if (idx_xn < 5) {
for (i in idx_xn:1) {
# collect the matrix
psi_n_1.n = potentials[, , i] # psi_x1,x2
# most elegant way 2x2 * 2x1 = 2x1
mu_b = t(psi_n_1.n) %*% t(mu_b)
#mu_b = t(matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])), nrow = 2) * t(mu_b))
}
} else {    # we're on node 5, return initial msg values
return(mu_b)
}
return(mu_b)
}
compute_bckwd_message(potentials, 5)
compute_bckwd_message(potentials, 1)
compute_bckwd_message(potentials, 3)
compute_bckwd_message(potentials, 4)
compute_bckwd_message(potentials, 5)
compute_fwd_message(potentials, 5)
compute_fwd_message(potentials, 1)
compute_fwd_message(potentials, 2)
compute_fwd_message(potentials, )
compute_fwd_message(potentials,2 )
compute_fwd_message(potentials,3 )
compute_fwd_message(potentials,4 )
compute_fwd_message(potentials,5 )
mu_b = matrix(c(1, 1), nrow = 1)
compute_bckwd_message = function(potentials, idx_xn) {
# initialize mu_b_x5 vector values for X1=0 and X1=1
mu_b = matrix(c(1, 1), nrow = 1)
#idx_xn = 4
if (idx_xn < 5) {
for (i in idx_xn:1) {
# collect the matrix
psi_n_1.n = potentials[, , i] # psi_x1,x2
# most elegant way 2x2 * 2x1 = 2x1
mu_b = t(psi_n_1.n) %*% t(mu_b)
#mu_b = t(matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])), nrow = 2) * t(mu_b))
}
} else {    # we're on node 5, return initial msg values
print('bl')
return(mu_b)
}
return(mu_b)
}
compute_bckwd_message(potentials, 5)
i=4
psi_n_1.n = potentials[, , i] # psi_x1,x2
psi_n_1.n
mu_b = t(psi_n_1.n) %*% t(mu_b)
mu_b
compute_bckwd_message = function(potentials, idx_xn) {
# initialize mu_b_x5 vector values for X1=0 and X1=1
mu_b = matrix(c(1, 1), nrow = 1)
#idx_xn = 4
i=4
if (idx_xn < 5) {
for (i in idx_xn:1) {
# collect the matrix
psi_n_1.n = potentials[, , i] # psi_x1,x2
# most elegant way 2x2 * 2x1 = 2x1
mu_b = t(psi_n_1.n) %*% t(mu_b)
#mu_b = t(matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])), nrow = 2) * t(mu_b))
}
} else {    # we're on node 5, return initial msg values
return(mu_b)
}
return(mu_b)
}
compute_bckwd_message(potentials, 5)
compute_bckwd_message(potentials, 1)
compute_bckwd_message(potentials, 3)
i=3
psi_n_1.n = potentials[, , i] # psi_x1,x2
psi_n_1.n
t(psi_n_1.n)
t(mu_b)
i=1
psi_n_1.n = potentials[, , i] # psi_x1,x2
psi_n_1.n
mu_b = t(psi_n_1.n) %*% t(mu_b)
t(psi_n_1.n)
t(mu_b)
mu_b = t(psi_n_1.n) %*% mu_b
mu_b
compute_bckwd_message = function(potentials, idx_xn) {
# initialize mu_b_x5 vector values for X1=0 and X1=1
mu_b = matrix(c(1, 1), nrow = 1)
if (idx_xn < 5) {
for (i in idx_xn:1) {
# collect the matrix
psi_n_1.n = potentials[, , i] # psi_x1,x2
# most elegant way 2x2 * 2x1 = 2x1
mu_b = t(psi_n_1.n) %*% mu_b
#mu_b = t(matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])), nrow = 2) * t(mu_b))
}
} else {    # we're on node 5, return initial msg values
return(mu_b)
}
return(mu_b)
}
compute_bckwd_message(potentials, 3)
mu_b = matrix(c(1, 1), nrow = 1)
i
i=3
psi_n_1.n = potentials[, , i] # psi_x1,x2
psi_n_1.n
t(psi_n_1.n) %*% mu_b
mu_b
t(mu_b)
t(psi_n_1.n)
t(psi_n_1.n) %*% t(mu_b)
mu_b = matrix(c(1, 1), nrow = 2)
t(psi_n_1.n) %*% t(mu_b)
mu_b = matrix(c(1, 1), nrow = 1)
t(psi_n_1.n) %*% t(mu_b)
compute_bckwd_message = function(potentials, idx_xn) {
# initialize mu_b_x5 vector values for X1=0 and X1=1,
# dims = (1 x 2)
mu_b = matrix(c(1, 1), nrow = 1)
if (idx_xn < 5) {
for (i in idx_xn:1) {
# collect the matrix
psi_n_1.n = potentials[, , i] # psi_x1,x2
# most elegant way 2x2 * 2x1 = 2x1
mu_b = t(t(psi_n_1.n) %*% t(mu_b))
#mu_b = t(matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])), nrow = 2) * t(mu_b))
}
} else {    # we're on node 5, return initial msg values
return(mu_b)
}
return(mu_b)
}
compute_bckwd_message(potentials, 3)
messages_F = matrix(0, nrow = 2, ncol = 5)
for (i in 1:ncol(messages)) {
messages_F[, i] = t(compute_fwd_message(potentials, idx_xn=i))
}
messages_B = matrix(0, nrow = 2, ncol = 5)
for (i in 1:ncol(messages)) {
messages_B[, i] = compute_bckwd_message(potentials, idx_xn=i)
}
messages_F
messages_B
marginals0 = messages_F[1, ] * messages_B[1, ]
marginals0
marginals1 = messages_F[2, ] * messages_B[2, ]
marginals1
marginals01 = marginals0 + marginals1
marginals01
cat("Marginals for X=0 are:",marginals0)
Zs = marginals0 + marginals1
print(Zs)
rbind(marginals0, marginals1)
rbind(marginals0, marginals1)
marginals = rbind(marginals0, marginals1)
marginals
colSums(marginals)
marginals/colSums(marginals)
marginals
colSums(marginals)
scale(marginals)
marginals[, 2]/colSums(marginals[,2])
colSums(marginals[,2])
(marginals[,2]
marginals
marginals
marginals = rbind(marginals0, marginals1)
marginals
marginals[, 2]/colSums(marginals[,2])
colSums(marginals)
marginals/colSums(marginals)
colSums(marginals)
marginals
marginals0/colSums(marginals)
marginals1/colSums(marginals)
marginals0
marginals0/colSums(marginals)
marginals1/colSums(marginals)
marginals0/colSums(marginals)
marginals1/colSums(marginals)
marginals0/colSums(marginals)
marginals = rbind(marginals0, marginals1)
rbind(marginals0/colSums(marginals), marginals1/colSums(marginals))
compute_fwd_message = function(potentials, idx_xn) {
# initialize mu_x2 vector values for X1=0 and X1=1
# it will take value of mu_a_x2
mu_a = matrix(c(1, 1), nrow = 1)
if (idx_xn > 1) {   # get messages from nodes x1 through xn
for (i in 1:(idx_xn-1)) {
# collect the matrix
psi_n_1.n = potentials[, , i] # psi_x1,x2
##1 1st Psi matrix row corresponds to conditioning when xn=1,
# to xn=0 values, but we want the other way round
# mu_a = mu_a %*% psi_n_1.n
##2 1st Psi matrix column corresponds to conditioning when xn=1,
# second when xn=0. This gives us a 1x1 * 2x2 = 1x2 matrix
mu_a = mu_a %*% t(psi_n_1.n)
##3 3rd alternative which makes most sense
# mu_a = t( t(mu_a) * matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])), nrow = 2) )
}
} else {    # return initial msg value for node 1
return(mu_a)
}
return(mu_a)
}
messages_F = matrix(0, nrow = 2, ncol = 5)
for (i in 1:ncol(messages_F)) {
messages_F[, i] = t(compute_fwd_message(potentials, idx_xn=i))
}
messages_F
compute_bckwd_message = function(potentials, idx_xn) {
# initialize mu_b_x5 vector values for X1=0 and X1=1,
# dims = (1 x 2)
mu_b = matrix(c(1, 1), nrow = 1)
if (idx_xn < 5) {
for (i in idx_xn:1) {
# collect the matrix
psi_n_1.n = potentials[, , i] #initial: psi_4,5
# matrix multiplication 2x2 * 2x1 = 2x1
# where matrix columns correspond to
# conditioning on n+1 and n, respectively
mu_b = t( t(psi_n_1.n) %*% t(mu_b) )
# solution that "makes sense to me" but
# connot be replicated with matrices
mu_b = t(matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])),
nrow = 2) * t(mu_b))
}
} else {    # we're on node 5, return initial msg values
return(mu_b)
}
return(mu_b)
}
messages_B = matrix(0, nrow = 2, ncol = 5)
for (i in 1:ncol(messages_B)) {
messages_B[, i] = compute_bckwd_message(potentials, idx_xn=i)
}
messages_B
marginals0 = messages_F[1, ] * messages_B[1, ]
marginals1 = messages_F[2, ] * messages_B[2, ]
Zs = marginals0 + marginals1
print(Zs)
compute_bckwd_message = function(potentials, idx_xn) {
# initialize mu_b_x5 vector values for X1=0 and X1=1,
# dims = (1 x 2)
mu_b = matrix(c(1, 1), nrow = 1)
if (idx_xn < 5) {
for (i in idx_xn:1) {
# collect the matrix
psi_n_1.n = potentials[, , i] #initial: psi_4,5
# matrix multiplication 2x2 * 2x1 = 2x1
# where matrix columns correspond to
# conditioning on n+1 and n, respectively
mu_b = t( t(psi_n_1.n) %*% t(mu_b) )
# solution that "makes sense to me" but
# connot be replicated with matrices
# mu_b = t(matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])),
#                 nrow = 2) * t(mu_b))
}
} else {    # we're on node 5, return initial msg values
return(mu_b)
}
return(mu_b)
}
messages_B = matrix(0, nrow = 2, ncol = 5)
for (i in 1:ncol(messages_B)) {
messages_B[, i] = compute_bckwd_message(potentials, idx_xn=i)
}
messages_B
mu_b = t( psi_n_1.n %*% t(mu_b) )
mu_b
compute_bckwd_message = function(potentials, idx_xn) {
# initialize mu_b_x5 vector values for X1=0 and X1=1,
# dims = (1 x 2)
mu_b = matrix(c(1, 1), nrow = 1)
if (idx_xn < 5) {
for (i in idx_xn:1) {
# collect the matrix
psi_n_1.n = potentials[, , i] #initial: psi_4,5
# matrix multiplication 2x2 * 2x1 = 2x1
# where matrix columns correspond to
# conditioning on n+1 and n, respectively
#mu_b = t( t(psi_n_1.n) %*% t(mu_b) )
mu_b = t( psi_n_1.n %*% t(mu_b) )
# solution that "makes sense to me" but
# connot be replicated with matrices
# mu_b = t(matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])),
#                 nrow = 2) * t(mu_b))
}
} else {    # we're on node 5, return initial msg values
return(mu_b)
}
return(mu_b)
}
messages_B = matrix(0, nrow = 2, ncol = 5)
for (i in 1:ncol(messages_B)) {
messages_B[, i] = compute_bckwd_message(potentials, idx_xn=i)
}
messages_B
marginals0 = messages_F[1, ] * messages_B[1, ]
marginals1 = messages_F[2, ] * messages_B[2, ]
cat("Marginals for nodes x1-x5 in state X=0 are:", marginals0)
cat("Marginals for nodes x1-x5 in state X=1 are:", marginals1)
Zs = marginals0 + marginals1
print(Zs)
# Problem 24: Classical NEMs
## 1. For each model, define the corresponding adjacency matrices $\phi$ and $\theta$ representing the signal graph and the effects graph, respectively. What are the corresponding expected effect patterns? ($F$).
```{r}
potentials = array(dim = c(2, 2, 4),
dimnames = list(c("0", "1"), c("0", "1"),
c("psi12", "psi23", "psi34", "psi45")))
potentials[ , , 1] = matrix(c((1-3/4)*(1-2/3), 3/4*(1-4/5), (1-3/4)*2/3, 3/4*4/5),
nrow = 2)
potentials[ , , 2] = matrix(c(2/3, 2/7, 1/3, 5/7), nrow = 2)
potentials[ , , 3] = matrix(c(3/5, 2/5, 2/5, 3/5), nrow = 2)
potentials[ , , 4] = matrix(c(2/9, 1/2, 7/9, 1/2), nrow = 2)
library(NEM)
install.packages("NEM")
source("https://bioconductor.org/biocLite.R")
a = matrix(c(0,0,0, 0,2,0, 0,1,2)
a = matrix(c(0,0,0, 0,2,0, 0,1,2), nrow = 3, ncol = 3 )
a
a = matrix(c(0,0,0, 0,2,0, 0,1,2), nrow = 3, ncol = 3 )
a
f = matrix(c(0,0,1, -1,-1,1, -1,1,0), nrow = 3, ncol = 3 )
a*f
a%*%f
a = matrix(c(0,1,2, 0,0,2, 0,2,2), nrow = 3, ncol = 3 )
f = matrix(c(0,0,1, -1,-1,1, -1,1,0), nrow = 3, ncol = 3 )
a*f
a%*%f
f
a = matrix(c(0,2,2, 0,1,0, 0,0,0), nrow = 3, ncol = 3 )
f = matrix(c(0,0,1, -1,-1,1, -1,1,0), nrow = 3, ncol = 3 )
a*f
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
data = readRDS("yeastStorey.rda")
data = readRDS("yeastStorey.rda")
setwd("~/google_drive/eth_school/18_spring/smcb/Projects/project10")
library(caret)
library(glmnet)
library(pROC)
data = readRDS("yeastStorey.rda")
load("yeastStorey.rda")
library(caret)
install.packages("caret")
install.packages("glmnet")
install.packages("pROC")
library(caret)
library(glmnet)
library(pROC)
