}
} else {    # we're on node 5, return initial msg values
return(mu_b)
}
return(mu_b)
}
compute_bckwd_message(potentials, 3)
messages_F = matrix(0, nrow = 2, ncol = 5)
for (i in 1:ncol(messages)) {
messages_F[, i] = t(compute_fwd_message(potentials, idx_xn=i))
}
messages_B = matrix(0, nrow = 2, ncol = 5)
for (i in 1:ncol(messages)) {
messages_B[, i] = compute_bckwd_message(potentials, idx_xn=i)
}
messages_F
messages_B
marginals0 = messages_F[1, ] * messages_B[1, ]
marginals0
marginals1 = messages_F[2, ] * messages_B[2, ]
marginals1
marginals01 = marginals0 + marginals1
marginals01
cat("Marginals for X=0 are:",marginals0)
Zs = marginals0 + marginals1
print(Zs)
rbind(marginals0, marginals1)
rbind(marginals0, marginals1)
marginals = rbind(marginals0, marginals1)
marginals
colSums(marginals)
marginals/colSums(marginals)
marginals
colSums(marginals)
scale(marginals)
marginals[, 2]/colSums(marginals[,2])
colSums(marginals[,2])
(marginals[,2]
marginals
marginals
marginals = rbind(marginals0, marginals1)
marginals
marginals[, 2]/colSums(marginals[,2])
colSums(marginals)
marginals/colSums(marginals)
colSums(marginals)
marginals
marginals0/colSums(marginals)
marginals1/colSums(marginals)
marginals0
marginals0/colSums(marginals)
marginals1/colSums(marginals)
marginals0/colSums(marginals)
marginals1/colSums(marginals)
marginals0/colSums(marginals)
marginals = rbind(marginals0, marginals1)
rbind(marginals0/colSums(marginals), marginals1/colSums(marginals))
compute_fwd_message = function(potentials, idx_xn) {
# initialize mu_x2 vector values for X1=0 and X1=1
# it will take value of mu_a_x2
mu_a = matrix(c(1, 1), nrow = 1)
if (idx_xn > 1) {   # get messages from nodes x1 through xn
for (i in 1:(idx_xn-1)) {
# collect the matrix
psi_n_1.n = potentials[, , i] # psi_x1,x2
##1 1st Psi matrix row corresponds to conditioning when xn=1,
# to xn=0 values, but we want the other way round
# mu_a = mu_a %*% psi_n_1.n
##2 1st Psi matrix column corresponds to conditioning when xn=1,
# second when xn=0. This gives us a 1x1 * 2x2 = 1x2 matrix
mu_a = mu_a %*% t(psi_n_1.n)
##3 3rd alternative which makes most sense
# mu_a = t( t(mu_a) * matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])), nrow = 2) )
}
} else {    # return initial msg value for node 1
return(mu_a)
}
return(mu_a)
}
messages_F = matrix(0, nrow = 2, ncol = 5)
for (i in 1:ncol(messages_F)) {
messages_F[, i] = t(compute_fwd_message(potentials, idx_xn=i))
}
messages_F
compute_bckwd_message = function(potentials, idx_xn) {
# initialize mu_b_x5 vector values for X1=0 and X1=1,
# dims = (1 x 2)
mu_b = matrix(c(1, 1), nrow = 1)
if (idx_xn < 5) {
for (i in idx_xn:1) {
# collect the matrix
psi_n_1.n = potentials[, , i] #initial: psi_4,5
# matrix multiplication 2x2 * 2x1 = 2x1
# where matrix columns correspond to
# conditioning on n+1 and n, respectively
mu_b = t( t(psi_n_1.n) %*% t(mu_b) )
# solution that "makes sense to me" but
# connot be replicated with matrices
mu_b = t(matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])),
nrow = 2) * t(mu_b))
}
} else {    # we're on node 5, return initial msg values
return(mu_b)
}
return(mu_b)
}
messages_B = matrix(0, nrow = 2, ncol = 5)
for (i in 1:ncol(messages_B)) {
messages_B[, i] = compute_bckwd_message(potentials, idx_xn=i)
}
messages_B
marginals0 = messages_F[1, ] * messages_B[1, ]
marginals1 = messages_F[2, ] * messages_B[2, ]
Zs = marginals0 + marginals1
print(Zs)
compute_bckwd_message = function(potentials, idx_xn) {
# initialize mu_b_x5 vector values for X1=0 and X1=1,
# dims = (1 x 2)
mu_b = matrix(c(1, 1), nrow = 1)
if (idx_xn < 5) {
for (i in idx_xn:1) {
# collect the matrix
psi_n_1.n = potentials[, , i] #initial: psi_4,5
# matrix multiplication 2x2 * 2x1 = 2x1
# where matrix columns correspond to
# conditioning on n+1 and n, respectively
mu_b = t( t(psi_n_1.n) %*% t(mu_b) )
# solution that "makes sense to me" but
# connot be replicated with matrices
# mu_b = t(matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])),
#                 nrow = 2) * t(mu_b))
}
} else {    # we're on node 5, return initial msg values
return(mu_b)
}
return(mu_b)
}
messages_B = matrix(0, nrow = 2, ncol = 5)
for (i in 1:ncol(messages_B)) {
messages_B[, i] = compute_bckwd_message(potentials, idx_xn=i)
}
messages_B
mu_b = t( psi_n_1.n %*% t(mu_b) )
mu_b
compute_bckwd_message = function(potentials, idx_xn) {
# initialize mu_b_x5 vector values for X1=0 and X1=1,
# dims = (1 x 2)
mu_b = matrix(c(1, 1), nrow = 1)
if (idx_xn < 5) {
for (i in idx_xn:1) {
# collect the matrix
psi_n_1.n = potentials[, , i] #initial: psi_4,5
# matrix multiplication 2x2 * 2x1 = 2x1
# where matrix columns correspond to
# conditioning on n+1 and n, respectively
#mu_b = t( t(psi_n_1.n) %*% t(mu_b) )
mu_b = t( psi_n_1.n %*% t(mu_b) )
# solution that "makes sense to me" but
# connot be replicated with matrices
# mu_b = t(matrix(c(sum(psi_n_1.n[, 1]), sum(psi_n_1.n[, 2])),
#                 nrow = 2) * t(mu_b))
}
} else {    # we're on node 5, return initial msg values
return(mu_b)
}
return(mu_b)
}
messages_B = matrix(0, nrow = 2, ncol = 5)
for (i in 1:ncol(messages_B)) {
messages_B[, i] = compute_bckwd_message(potentials, idx_xn=i)
}
messages_B
marginals0 = messages_F[1, ] * messages_B[1, ]
marginals1 = messages_F[2, ] * messages_B[2, ]
cat("Marginals for nodes x1-x5 in state X=0 are:", marginals0)
cat("Marginals for nodes x1-x5 in state X=1 are:", marginals1)
Zs = marginals0 + marginals1
print(Zs)
# Problem 24: Classical NEMs
## 1. For each model, define the corresponding adjacency matrices $\phi$ and $\theta$ representing the signal graph and the effects graph, respectively. What are the corresponding expected effect patterns? ($F$).
```{r}
potentials = array(dim = c(2, 2, 4),
dimnames = list(c("0", "1"), c("0", "1"),
c("psi12", "psi23", "psi34", "psi45")))
potentials[ , , 1] = matrix(c((1-3/4)*(1-2/3), 3/4*(1-4/5), (1-3/4)*2/3, 3/4*4/5),
nrow = 2)
potentials[ , , 2] = matrix(c(2/3, 2/7, 1/3, 5/7), nrow = 2)
potentials[ , , 3] = matrix(c(3/5, 2/5, 2/5, 3/5), nrow = 2)
potentials[ , , 4] = matrix(c(2/9, 1/2, 7/9, 1/2), nrow = 2)
library(NEM)
install.packages("NEM")
source("https://bioconductor.org/biocLite.R")
a = matrix(c(0,0,0, 0,2,0, 0,1,2)
a = matrix(c(0,0,0, 0,2,0, 0,1,2), nrow = 3, ncol = 3 )
a
a = matrix(c(0,0,0, 0,2,0, 0,1,2), nrow = 3, ncol = 3 )
a
f = matrix(c(0,0,1, -1,-1,1, -1,1,0), nrow = 3, ncol = 3 )
a*f
a%*%f
a = matrix(c(0,1,2, 0,0,2, 0,2,2), nrow = 3, ncol = 3 )
f = matrix(c(0,0,1, -1,-1,1, -1,1,0), nrow = 3, ncol = 3 )
a*f
a%*%f
f
a = matrix(c(0,2,2, 0,1,0, 0,0,0), nrow = 3, ncol = 3 )
f = matrix(c(0,0,1, -1,-1,1, -1,1,0), nrow = 3, ncol = 3 )
a*f
setwd("~/google_drive/eth_school/18_spring/smcb/Projects/project_9")
setwd("~/google_drive/eth_school/18_spring/smcb/Projects/project_9")
setwd("~/google_drive/eth_school/18_spring/smcb/Projects/project_9")
load("MVN_DAG.rds")
readRDS("MVN_DAG.rds")
load("~/google_drive/eth_school/18_spring/smcb/Projects/project_9/MVN_DAG.rds")
data = readRDS("MVN_DAG.rds")
View(data)
plot(data['A'])
plot(data['A'], data['B'])
plot(data['A'])
plot(data['B'])
plot(y=data['A'])
scatter(data['A'])
scatter(data[, 1)
scatter(data[, 1])
plot(data[, 1])
plot(data[, 1])
plot(data[, 2])
library(ggplot2)
ggplot(data[, 1:2], aes(x, value, color = variable)) +
geom_point() +
scale_colour_manual(values = c("red", "blue"))
ggplot(data[, 1:2], aes(value, color = variable)) +
geom_point() +
scale_colour_manual(values = c("red", "blue"))
ggplot(data[, 1:2], aes(color = variable)) +
geom_point() +
scale_colour_manual(values = c("red", "blue"))
data$ID = seq.int(nrow(data))
x <- seq(0, 4 * pi, 0.1)
n <- length(x)
y1 <- 0.5 * runif(n) + sin(x)
y2 <- 0.5 * runif(n) + cos(x) - sin(x)
df <- data.frame(x, y1, y2)
df
ggplot(data, aes(ID, y = value, color = variable)) +
geom_point(aes(y = A, col = "A")) +
geom_point(aes(y = B, col = "B"))
cor.test(data[, 1], data[, 2])
?cor.test
cor.test(data[, 1], data[, 2])
cor.test(data[, 1], data[, 3])
cor.test(data[, 1], data[, 2])
cor.test(data[, 1], data[, 3])
cor.test(data[, 2], data[, 3])
cor.test(data[, 1], data[, 3])
cor.test(data[, 1], data[, 2])
cor.test(data[, 2], data[, 1])
cor_AB = cor.test(data[, 1], data[, 2])
cor_AC = cor.test(data[, 1], data[, 3])
cor_AC = cor.test(data[, 1], data[, 3])
cor_BC = cor.test(data[, 2], data[, 3])
ggplot(data, aes(ID, y = value, color = variable)) +
geom_point(aes(y = A, col = "A")) +
geom_point(aes(y = C, col = "C"))
cor_BF = cor.test(data[, 2], data[, 6])
cor_BF
cor_BF = cor.test(data[, 2], data[, 5])
cor_BF
cor.test(data[, 1:5])
cor(data[, 1:5])
cor_all = cor(data[, 1:5])
round(cor_all, 2)
cor_all = round(cor_all, 2)
cor_all
cor_AC
cor_BC
cor_AB = cor.test(data[, 1], data[, 2])
cor_AB
cor_all
cor_AB
cor_BF
cor_BF = cor.test(data[, 2], data[, 5])
cor_BF
cor_BF = cor.test(data[, 2], data[, 6])
cor_BF
cor_all = round(cor(data[, 1:5]), 2)
cor_all
lmFit = lm(data[, 1] ~ data[, 3])
lmFit
lmFit = lm(data[, 1] ~ data[, 3], data = data)
lmFit
lm_AC = lm(data[, 1] ~ data[, 3], data = data)
residuals(lm_AC)
lm_BC = lm(data[, 2] ~ data[, 3], data = data)
res_AC = residuals(lm_AC)
res_BC = residuals(lm_BC)
lm_BC = lm(data[, 2] ~ data[, 3], data = data)
res_BC = residuals(lm_BC)
res_BC
lm_BC
lm_AC
lm_AC = lm(data[, 3] ~ data[, 1], data = data)
res_AC = residuals(lm_AC)
lm_AC
lm_AC = lm(data[, 1] ~ data[, 3], data = data)
res_AC = residuals(lm_AC)
plot(x = res_AC, y =res_BC )
plot(x = res_AC, y = res_BC )
cor.test(res_AC, res_BC)
cor_ABgC = cor.test(res_AC, res_BC)
cor_ABgC$p.value
cor_AB$p.value
cor_AC$p.value
cor_BC$p.value
heatmap(cor_all, xlab = 'All pair-wise PCCs for 6 nodes')
cor_all
heatmap(cor_all, xlab = 'All pair-wise PCCs for 6 nodes')
cor_ABgC$p.value
install.packages("pcalg")
library(pcalg)
cov(data[, 1:6])
cov_mtx = cov(data[, 1:6])
data_n = nrow(data)
data_cov = cov(data[, 1:6])
data_cov
data_n
colnames(data)
colnames(data[, 1:6])
a = pc(suffStat = c(data_cov, data_n), indepTest = gaussCItest(),
colnames = colnames(data[, 1:6]), alpha = 0.9)
a = pc(suffStat = c(data_cov, data_n), indepTest = gaussCItest(),
labels = colnames(data[, 1:6]), alpha = 0.9)
data_cov
a = pc(suffStat = c(data_cov, data_n), indepTest = indepTestgaussCItest,
labels = colnames(data[, 1:6]), alpha = 0.9)
a = pc(suffStat = c(data_cov, data_n), indepTest = gaussCItest,
labels = colnames(data[, 1:6]), alpha = 0.9)
(data[, 1:6]
colnames(data[, 1:6])
c(colnames(data[, 1:6]))
a = pc(suffStat = c(data_cov, data_n), indepTest = gaussCItest,
labels = c(colnames(data[, 1:6])), alpha = 0.9)
colnames(data)
class(colnames(data))
c(data_cov, data_n)
as.list(data_cov, data_n)
data_cov
stats = as.list(data_cov, data_n)
a = pc(suffStat = stats, indepTest = gaussCItest,
labels = c(colnames(data[, 1:6])), alpha = 0.9)
data_cov = cov2cor(trueCov(data[, 1:6]))
data_cov = cov(data[, 1:6])
data_n = nrow(data)
suffStat = list(C = data_cov, n = data_n)
suffStat
a = pc(suffStat = suffStat, indepTest = gaussCItest,
labels = c(colnames(data[, 1:6])), alpha = 0.9)
a
a
plot(a)
a = pc(suffStat = suffStat, indepTest = gaussCItest,
labels = c(colnames(data[, 1:6])), alpha = 0.1)
plot(a)
a = pc(alpha = 0.1, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.4, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.3, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.2, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.25, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.23, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.22, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.20, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.4, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.8, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.2, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.21, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.22, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.25, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.99, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.7, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.2, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.1, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.2, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.4, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.9, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
iplot(a)
iplotPC(a)
a = pc(alpha = 0.2, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
iplotPC(a)
a = pc(alpha = 0.18, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.15, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.10, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.11, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.1, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.13, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.12, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.11, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.115, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.119, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.12, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.11, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.10, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.20, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.3, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.25, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.4, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.10, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.20, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.4, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.3, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.25, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.40, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
plot(x = res_AC, y = res_BC)
cor_ABgC$p.value
$A \!\perp\!\!\!\perp B | C$
data = readRDS("MVN_DAG.rds")
data$ID = seq.int(nrow(data))
library(ggplot2)
ggplot(data, aes(ID, y = value, color = variable)) +
geom_point(aes(y = A, col = "A")) +
geom_point(aes(y = B, col = "B"))
# calculate Pearson Corerrelation Coef (PCC) between A and B
cor_AB = cor.test(data[, 1], data[, 2])
cor_AB$p.value
# Null hypothesis, that A and B are not related holds
# test for correlations between A and C, and B and C
cor_AC = cor.test(data[, 1], data[, 3])
cor_BC = cor.test(data[, 2], data[, 3])
cor_AC$p.value
cor_BC$p.value
# "negative" control: unconnected node F to B
# expect very low correlation
cor_BF = cor.test(data[, 2], data[, 6])
# calculate all pair-wise PCCs
cor_all = round(cor(data[, 1:5]), 2)
heatmap(cor_all, xlab = 'All pair-wise PCCs for 6 nodes')
cor_AB$p.value
cor_AC
cor_AC$p.value
cor_BC$p.value
cor_BF$p.value
# Linearly regress A on C (that is, with A as the response variable
# and C as the explanatory variable).
# Compute and store the residuals.
lm_AC = lm(data[, 1] ~ data[, 3], data = data)
res_AC = residuals(lm_AC)
# Linearly regress B on C. Compute and store the residuals.
lm_BC = lm(data[, 2] ~ data[, 3], data = data)
res_BC = residuals(lm_BC)
# Plot the residuals of A (regressed on C) against
# the residuals of B (regressed on C). What do you see?
plot(x = res_AC, y = res_BC)
# install.packages("pcalg")
library(pcalg)
# calculate covariance matrix
data_cov = cov(data[, 1:6])
data_n = nrow(data)
suffStat = list(C = data_cov, n = data_n)
# alpha: significance level (number in (0, 1) for the individual
# conditional independence tests.
a = pc(alpha = 0.10, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.20, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.40, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
a = pc(alpha = 0.9, suffStat = suffStat, indepTest = gaussCItest, labels = c(colnames(data[, 1:6])))
plot(a)
